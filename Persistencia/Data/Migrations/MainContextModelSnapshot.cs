// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Data.Migrations
{
    [DbContext(typeof(MainContext))]
    partial class MainContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Entities.Arl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("arl", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle arl 456",
                            Email = "arl1@gmail.com",
                            Nombre = "Arl1",
                            Telefono = "4342443324"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle arl 789",
                            Email = "arl2@gmail.com",
                            Nombre = "Arl2",
                            Telefono = "2342346563"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Calle arl 123",
                            Email = "arl3@gmail.com",
                            Nombre = "Arl3",
                            Telefono = "2457324355"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("cargo", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "... Gerente",
                            Nombre = "Gerente"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "... Admin",
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "... Vendedor",
                            Nombre = "Vendedor"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdDepartamento")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdDepartamento");

                    b.ToTable("ciudad", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdDepartamento = 1,
                            Nombre = "Bucaramanga"
                        },
                        new
                        {
                            Id = 2,
                            IdDepartamento = 1,
                            Nombre = "Piedecuesta"
                        },
                        new
                        {
                            Id = 3,
                            IdDepartamento = 1,
                            Nombre = "Giron"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedor");

                    b.ToTable("compra", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2
                        },
                        new
                        {
                            Id = 3,
                            Fecha = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3
                        },
                        new
                        {
                            Id = 4,
                            Fecha = new DateTime(2023, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1
                        },
                        new
                        {
                            Id = 5,
                            Fecha = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2
                        },
                        new
                        {
                            Id = 6,
                            Fecha = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3
                        },
                        new
                        {
                            Id = 7,
                            Fecha = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1
                        },
                        new
                        {
                            Id = 8,
                            Fecha = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2
                        },
                        new
                        {
                            Id = 9,
                            Fecha = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3
                        },
                        new
                        {
                            Id = 10,
                            Fecha = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdPais")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("IdPais");

                    b.ToTable("departamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdPais = 1,
                            Nombre = "Santander"
                        },
                        new
                        {
                            Id = 2,
                            IdPais = 2,
                            Nombre = "Buenos Aires"
                        },
                        new
                        {
                            Id = 3,
                            IdPais = 3,
                            Nombre = "Ciudad Mexico"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FechaContratacion")
                        .HasColumnType("date");

                    b.Property<int>("IdArl")
                        .HasColumnType("int");

                    b.Property<int>("IdCargo")
                        .HasColumnType("int");

                    b.Property<int>("IdCiudad")
                        .HasColumnType("int");

                    b.Property<int>("IdEps")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IdArl");

                    b.HasIndex("IdCargo");

                    b.HasIndex("IdCiudad");

                    b.HasIndex("IdEps");

                    b.ToTable("empleado", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Perez",
                            Direccion = "Calle 123",
                            FechaContratacion = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdArl = 1,
                            IdCargo = 3,
                            IdCiudad = 1,
                            IdEps = 1,
                            Nombres = "Pedro",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Villamizar",
                            Direccion = "Calle 123",
                            FechaContratacion = new DateTime(2019, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdArl = 2,
                            IdCargo = 3,
                            IdCiudad = 1,
                            IdEps = 2,
                            Nombres = "Ana",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Garcia",
                            Direccion = "Calle 123",
                            FechaContratacion = new DateTime(2018, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdArl = 3,
                            IdCargo = 1,
                            IdCiudad = 1,
                            IdEps = 3,
                            Nombres = "Luis",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            Id = 4,
                            Apellidos = "Garcia",
                            Direccion = "Calle 123",
                            FechaContratacion = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdArl = 1,
                            IdCargo = 2,
                            IdCiudad = 1,
                            IdEps = 3,
                            Nombres = "Sofia",
                            Telefono = "555-1234"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Eps", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("eps", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle Eps 456",
                            Email = "eps1@gmail.com",
                            Nombre = "Eps1",
                            Telefono = "4342443324"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle Eps 789",
                            Email = "eps2@gmail.com",
                            Nombre = "Eps2",
                            Telefono = "2342346563"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Calle Eps 123",
                            Email = "eps3@gmail.com",
                            Nombre = "Eps3",
                            Telefono = "2457324355"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("date");

                    b.Property<int>("IdProveedor")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Precio")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdProveedor");

                    b.ToTable("medicamento", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FechaExpiracion = new DateTime(2024, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1,
                            Nombre = "Paracetamol",
                            Precio = 20,
                            Stock = 150
                        },
                        new
                        {
                            Id = 2,
                            FechaExpiracion = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2,
                            Nombre = "Ibuprofeno",
                            Precio = 25,
                            Stock = 50
                        },
                        new
                        {
                            Id = 3,
                            FechaExpiracion = new DateTime(2024, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3,
                            Nombre = "Aspirina",
                            Precio = 15,
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            FechaExpiracion = new DateTime(2025, 8, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1,
                            Nombre = "Amoxicilina",
                            Precio = 40,
                            Stock = 75
                        },
                        new
                        {
                            Id = 5,
                            FechaExpiracion = new DateTime(2024, 1, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2,
                            Nombre = "Cetirizina",
                            Precio = 10,
                            Stock = 110
                        },
                        new
                        {
                            Id = 6,
                            FechaExpiracion = new DateTime(2024, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3,
                            Nombre = "Losartan",
                            Precio = 55,
                            Stock = 95
                        },
                        new
                        {
                            Id = 7,
                            FechaExpiracion = new DateTime(2024, 9, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1,
                            Nombre = "Metformina",
                            Precio = 60,
                            Stock = 180
                        },
                        new
                        {
                            Id = 8,
                            FechaExpiracion = new DateTime(2024, 10, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 2,
                            Nombre = "Atorvastatina",
                            Precio = 45,
                            Stock = 200
                        },
                        new
                        {
                            Id = 9,
                            FechaExpiracion = new DateTime(2024, 4, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 3,
                            Nombre = "Clonazepam",
                            Precio = 35,
                            Stock = 25
                        },
                        new
                        {
                            Id = 10,
                            FechaExpiracion = new DateTime(2025, 2, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdProveedor = 1,
                            Nombre = "Loratadina",
                            Precio = 22,
                            Stock = 120
                        });
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoCompra", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdCompra")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicamento")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdCompra");

                    b.HasIndex("IdMedicamento");

                    b.ToTable("medicamento_compra", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 50,
                            IdCompra = 1,
                            IdMedicamento = 1,
                            Precio = 15m
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 25,
                            IdCompra = 2,
                            IdMedicamento = 2,
                            Precio = 20m
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 10,
                            IdCompra = 3,
                            IdMedicamento = 3,
                            Precio = 12m
                        },
                        new
                        {
                            Id = 4,
                            Cantidad = 30,
                            IdCompra = 4,
                            IdMedicamento = 4,
                            Precio = 35m
                        },
                        new
                        {
                            Id = 5,
                            Cantidad = 50,
                            IdCompra = 5,
                            IdMedicamento = 5,
                            Precio = 8m
                        },
                        new
                        {
                            Id = 6,
                            Cantidad = 40,
                            IdCompra = 6,
                            IdMedicamento = 6,
                            Precio = 50m
                        },
                        new
                        {
                            Id = 7,
                            Cantidad = 60,
                            IdCompra = 7,
                            IdMedicamento = 7,
                            Precio = 55m
                        },
                        new
                        {
                            Id = 8,
                            Cantidad = 70,
                            IdCompra = 8,
                            IdMedicamento = 8,
                            Precio = 40m
                        },
                        new
                        {
                            Id = 9,
                            Cantidad = 15,
                            IdCompra = 9,
                            IdMedicamento = 9,
                            Precio = 32m
                        },
                        new
                        {
                            Id = 10,
                            Cantidad = 50,
                            IdCompra = 10,
                            IdMedicamento = 10,
                            Precio = 20m
                        });
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoVenta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IdMedicamento")
                        .HasColumnType("int");

                    b.Property<int>("IdVenta")
                        .HasColumnType("int");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(8, 2)");

                    b.HasKey("Id");

                    b.HasIndex("IdMedicamento");

                    b.HasIndex("IdVenta");

                    b.ToTable("medicamento_venta", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cantidad = 2,
                            IdMedicamento = 1,
                            IdVenta = 1,
                            Precio = 20m
                        },
                        new
                        {
                            Id = 2,
                            Cantidad = 1,
                            IdMedicamento = 2,
                            IdVenta = 2,
                            Precio = 25m
                        },
                        new
                        {
                            Id = 3,
                            Cantidad = 2,
                            IdMedicamento = 3,
                            IdVenta = 2,
                            Precio = 15m
                        },
                        new
                        {
                            Id = 4,
                            Cantidad = 1,
                            IdMedicamento = 4,
                            IdVenta = 3,
                            Precio = 40m
                        },
                        new
                        {
                            Id = 5,
                            Cantidad = 1,
                            IdMedicamento = 5,
                            IdVenta = 4,
                            Precio = 10m
                        },
                        new
                        {
                            Id = 6,
                            Cantidad = 1,
                            IdMedicamento = 6,
                            IdVenta = 5,
                            Precio = 55m
                        },
                        new
                        {
                            Id = 7,
                            Cantidad = 1,
                            IdMedicamento = 7,
                            IdVenta = 6,
                            Precio = 60m
                        },
                        new
                        {
                            Id = 8,
                            Cantidad = 1,
                            IdMedicamento = 8,
                            IdVenta = 7,
                            Precio = 45m
                        },
                        new
                        {
                            Id = 9,
                            Cantidad = 1,
                            IdMedicamento = 9,
                            IdVenta = 8,
                            Precio = 35m
                        },
                        new
                        {
                            Id = 10,
                            Cantidad = 1,
                            IdMedicamento = 10,
                            IdVenta = 9,
                            Precio = 22m
                        },
                        new
                        {
                            Id = 11,
                            Cantidad = 2,
                            IdMedicamento = 1,
                            IdVenta = 10,
                            Precio = 20m
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("paciente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellidos = "Perez",
                            Direccion = "Calle 123",
                            Nombres = "Juan",
                            Telefono = "555-1234"
                        },
                        new
                        {
                            Id = 2,
                            Apellidos = "Villamizar",
                            Direccion = "Calle 456",
                            Nombres = "Maria",
                            Telefono = "555-5678"
                        },
                        new
                        {
                            Id = 3,
                            Apellidos = "Garcia",
                            Direccion = "Calle 789",
                            Nombres = "Luis",
                            Telefono = "555-9012"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("pais", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nombre = "Colombia"
                        },
                        new
                        {
                            Id = 2,
                            Nombre = "Argentina"
                        },
                        new
                        {
                            Id = 3,
                            Nombre = "Mexico"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.HasKey("Id");

                    b.ToTable("proveedor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Direccion = "Calle Proveedor 456",
                            Email = "contacto@proveedora.com",
                            Nombre = "ProveedorA",
                            Telefono = "32335232"
                        },
                        new
                        {
                            Id = 2,
                            Direccion = "Calle Proveedor 789",
                            Email = "contacto@proveedorb.com",
                            Nombre = "ProveedorB",
                            Telefono = "67835424"
                        },
                        new
                        {
                            Id = 3,
                            Direccion = "Calle Proveedor 123",
                            Email = "contacto@proveedorc.com",
                            Nombre = "ProveedorC",
                            Telefono = "34578724"
                        });
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("EsRevocado")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("EstaActivo")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("IdUsuario");

                    b.ToTable("refresh_token", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("rol", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdRol")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("IdRol");

                    b.HasIndex("Username", "Email")
                        .IsUnique();

                    b.ToTable("usuario", (string)null);
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("date");

                    b.Property<int>("IdEmpleado")
                        .HasColumnType("int");

                    b.Property<int>("IdPaciente")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdEmpleado");

                    b.HasIndex("IdPaciente");

                    b.ToTable("venta", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fecha = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 1,
                            IdPaciente = 1
                        },
                        new
                        {
                            Id = 2,
                            Fecha = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 2,
                            IdPaciente = 2
                        },
                        new
                        {
                            Id = 3,
                            Fecha = new DateTime(2023, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 1,
                            IdPaciente = 3
                        },
                        new
                        {
                            Id = 4,
                            Fecha = new DateTime(2023, 2, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 1,
                            IdPaciente = 2
                        },
                        new
                        {
                            Id = 5,
                            Fecha = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 2,
                            IdPaciente = 1
                        },
                        new
                        {
                            Id = 6,
                            Fecha = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 2,
                            IdPaciente = 2
                        },
                        new
                        {
                            Id = 7,
                            Fecha = new DateTime(2023, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 1,
                            IdPaciente = 2
                        },
                        new
                        {
                            Id = 8,
                            Fecha = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 1,
                            IdPaciente = 2
                        },
                        new
                        {
                            Id = 9,
                            Fecha = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 2,
                            IdPaciente = 1
                        },
                        new
                        {
                            Id = 10,
                            Fecha = new DateTime(2023, 6, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdEmpleado = 2,
                            IdPaciente = 2
                        });
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.HasOne("Dominio.Entities.Departamento", "Departamento")
                        .WithMany("Ciudades")
                        .HasForeignKey("IdDepartamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departamento");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("Compras")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.HasOne("Dominio.Entities.Pais", "Pais")
                        .WithMany("Departamentos")
                        .HasForeignKey("IdPais")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.HasOne("Dominio.Entities.Arl", "Arl")
                        .WithMany("Empleados")
                        .HasForeignKey("IdArl")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Cargo", "Cargo")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCargo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Ciudad", "Ciudad")
                        .WithMany("Empleados")
                        .HasForeignKey("IdCiudad")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Eps", "Eps")
                        .WithMany("Empleados")
                        .HasForeignKey("IdEps")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Arl");

                    b.Navigation("Cargo");

                    b.Navigation("Ciudad");

                    b.Navigation("Eps");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.HasOne("Dominio.Entities.Proveedor", "Proveedor")
                        .WithMany("Medicamentos")
                        .HasForeignKey("IdProveedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Proveedor");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoCompra", b =>
                {
                    b.HasOne("Dominio.Entities.Compra", "Compra")
                        .WithMany("MedicamentoCompras")
                        .HasForeignKey("IdCompra")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentoCompras")
                        .HasForeignKey("IdMedicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compra");

                    b.Navigation("Medicamento");
                });

            modelBuilder.Entity("Dominio.Entities.MedicamentoVenta", b =>
                {
                    b.HasOne("Dominio.Entities.Medicamento", "Medicamento")
                        .WithMany("MedicamentoVentas")
                        .HasForeignKey("IdMedicamento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Venta", "Venta")
                        .WithMany("MedicamentoVentas")
                        .HasForeignKey("IdVenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Medicamento");

                    b.Navigation("Venta");
                });

            modelBuilder.Entity("Dominio.Entities.RefreshToken", b =>
                {
                    b.HasOne("Dominio.Entities.Usuario", "Usuario")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.HasOne("Dominio.Entities.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("IdRol")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.HasOne("Dominio.Entities.Empleado", "Empleado")
                        .WithMany("Ventas")
                        .HasForeignKey("IdEmpleado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Entities.Paciente", "Paciente")
                        .WithMany("Ventas")
                        .HasForeignKey("IdPaciente")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Empleado");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("Dominio.Entities.Arl", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Cargo", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Ciudad", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Compra", b =>
                {
                    b.Navigation("MedicamentoCompras");
                });

            modelBuilder.Entity("Dominio.Entities.Departamento", b =>
                {
                    b.Navigation("Ciudades");
                });

            modelBuilder.Entity("Dominio.Entities.Empleado", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Eps", b =>
                {
                    b.Navigation("Empleados");
                });

            modelBuilder.Entity("Dominio.Entities.Medicamento", b =>
                {
                    b.Navigation("MedicamentoCompras");

                    b.Navigation("MedicamentoVentas");
                });

            modelBuilder.Entity("Dominio.Entities.Paciente", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("Dominio.Entities.Pais", b =>
                {
                    b.Navigation("Departamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Proveedor", b =>
                {
                    b.Navigation("Compras");

                    b.Navigation("Medicamentos");
                });

            modelBuilder.Entity("Dominio.Entities.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Dominio.Entities.Usuario", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Dominio.Entities.Venta", b =>
                {
                    b.Navigation("MedicamentoVentas");
                });
#pragma warning restore 612, 618
        }
    }
}
